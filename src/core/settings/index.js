// Moved from src/settings/index.js (Phase 5 core move)
const DEFAULTS={ partFraction:0.6, anchorMode:'bottom', edgeAnchoringMode:'adaptive', partPadding:4, gapOuterPx:6, gapMetaPx:6, gapIntraPx:6, gapBetweenPx:10, topZoneLines:0, bottomZoneLines:0, fadeMode:'binary', fadeHiddenOpacity:0, fadeInMs:120, fadeOutMs:120, fadeTransitionMs:120, scrollAnimMs:240, scrollAnimEasing:'easeOutQuad', scrollAnimDynamic:true, scrollAnimMinMs:80, scrollAnimMaxMs:600, assumedUserTokens:256, userRequestAllowance:100, maxTrimAttempts:10, charsPerToken:3.5, showTrimNotice:false }
const LS_KEY='maichat.settings.v1'
let current=null; const listeners=new Set()
export function loadSettings(){ if(current) return current; try { const raw=localStorage.getItem(LS_KEY); if(raw){ const parsed=JSON.parse(raw); if(parsed && (parsed.paddingPx!==undefined || parsed.gapPx!==undefined)){ if(parsed.paddingPx!==undefined && parsed.partPadding===undefined) parsed.partPadding=parsed.paddingPx; if(parsed.gapPx!==undefined){ if(parsed.gapIntraPx===undefined) parsed.gapIntraPx=parsed.gapPx; if(parsed.gapMetaPx===undefined) parsed.gapMetaPx=parsed.gapPx; if(parsed.gapOuterPx===undefined) parsed.gapOuterPx=parsed.gapPx; if(parsed.gapBetweenPx===undefined) parsed.gapBetweenPx=parsed.gapPx } delete parsed.paddingPx; delete parsed.gapPx } if(parsed && parsed.fadeTransitionMs!=null){ if(parsed.fadeInMs==null) parsed.fadeInMs=parsed.fadeTransitionMs; if(parsed.fadeOutMs==null) parsed.fadeOutMs=parsed.fadeTransitionMs } current={ ...DEFAULTS, ...parsed } } else current={ ...DEFAULTS } } catch { current={ ...DEFAULTS } } return current }
export function saveSettings(patch){ current={ ...loadSettings(), ...patch }; try { localStorage.setItem(LS_KEY, JSON.stringify(current)) } catch{}; for(const fn of listeners) fn(current); return current }
export function getSettings(){ return loadSettings() }
export function subscribeSettings(fn){ listeners.add(fn); return ()=>listeners.delete(fn) }
export function resetSettings(){ current={ ...DEFAULTS }; saveSettings({}) }
